{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","index.js"],"names":["TableCell","colorSelected","handleApplyColor","style","backgroundColor","onClick","TableRow","numCols","Array","map","val","index","Table","numRows","id","App","useState","rows","setRow","cols","setCol","color","setColor","class","console","log","document","getElementById","getElementsByTagName","i","length","onChange","e","target","value","ReactDOM","render","StrictMode"],"mappings":"6OAIeA,EAJG,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,iBACjC,OAAO,oBAAIC,MAAO,CAACC,gBAAiBH,GAAgBI,QAASH,KCWhDI,EAVE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAASL,EAAuB,EAAvBA,iBAC3B,OACE,6BACG,YAAIM,MAAMD,IAAUE,KAAI,SAACC,EAAKC,GAAN,OACvB,cAAC,EAAD,CAAuBT,iBAAkBA,GAAzBS,SCWTC,EAdD,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,QAASN,EAAgC,EAAhCA,QAASL,EAAuB,EAAvBA,iBACjC,OACE,uBAAOY,GAAG,OAAV,SACE,gCACC,YAAIN,MAAMK,IAAUJ,KAAI,SAACC,EAAKC,GAAN,OACvB,cAAC,EAAD,CAEEJ,QAASA,EACTL,iBAAkBA,GAFbS,WCsGAI,EA1GH,WAAO,IAAD,EACOC,mBAAS,GADhB,mBACTC,EADS,KACHC,EADG,OAEOF,mBAAS,GAFhB,mBAETG,EAFS,KAEHC,EAFG,OAGUJ,mBAAS,OAHnB,mBAGTK,EAHS,KAGFC,EAHE,KAiFhB,OACA,gCACE,oBAAIC,MAAM,SAAV,uBACE,wBAAQlB,QA/EG,WACA,IAATY,GACFC,EAAO,GACPE,EAAO,IAGPF,GAAO,SAAAD,GAAI,OAAIA,EAAO,KAExBO,QAAQC,IAAIR,IAuEV,qBACA,wBAAQZ,QAtEG,WACA,IAATc,GACFD,EAAO,GACPE,EAAO,IAGPA,GAAO,SAAAD,GAAI,OAAIA,EAAO,MAgEtB,wBACA,wBAAQd,QA7DM,WACZY,EAAO,IACI,IAATA,GACFC,EAAO,GACPA,EAAO,IAGPA,GAAO,SAAAD,GAAI,OAAIA,EAAO,KAExBO,QAAQC,IAAIR,KAoDZ,wBACA,wBAAQZ,QAjDM,WACZc,EAAO,IACI,IAATA,GACFC,EAAO,GACPA,EAAO,IAGPA,GAAO,SAAAD,GAAI,OAAIA,EAAO,KAExBK,QAAQC,IAAIN,KAwCZ,2BACA,wBAAQd,QAxBU,WAElB,IADA,IAAIY,EAAQS,SAASC,eAAe,QAAQC,qBAAqB,MACxDC,EAAI,EAAGA,EAAIZ,EAAKa,OAAQD,IACS,KAAlCZ,EAAKY,GAAG1B,MAAMC,kBACda,EAAKY,GAAG1B,MAAMC,gBAAkBiB,IAoBxC,4BACA,wBAAQhB,QAjCC,WAET,IADA,IAAIY,EAAQS,SAASC,eAAe,QAAQC,qBAAqB,MACxDC,EAAI,EAAGA,EAAIZ,EAAKa,OAAQD,IAC7BZ,EAAKY,GAAG1B,MAAMC,gBAAkBiB,GA8BpC,sBACA,wBAAQhB,QAhBK,WAEb,IADA,IAAIY,EAAQS,SAASC,eAAe,QAAQC,qBAAqB,MACxDC,EAAI,EAAGA,EAAIZ,EAAKa,OAAQD,IAC7BZ,EAAKY,GAAG1B,MAAMC,gBAAkB,IAapC,mBAEA,yBAAQ2B,SAzCU,SAAAC,GAAC,OAAIV,EAASU,EAAEC,OAAOC,QAyCzC,UACE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,QAAd,sBAGF,cAAC,EAAD,CAAOrB,QAASI,EAAMV,QAASY,EAAMjB,iBA9ChB,SAAA8B,GAAC,OAAKA,EAAEC,OAAO9B,MAAMC,gBAAkBiB,SCrDlEc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFX,SAASC,eAAe,W","file":"static/js/main.4f1da350.chunk.js","sourcesContent":["const TableCell = ({colorSelected, handleApplyColor}) => {\n  return <td style={{backgroundColor: colorSelected}} onClick={handleApplyColor}></td>\n}\n\nexport default TableCell;\n","import TableCell from \"./TableCell\";\n\nconst TableRow = ({ numCols, handleApplyColor }) => {\n  return (\n    <tr>\n      {[...Array(numCols)].map((val, index) => (\n        <TableCell key={index} handleApplyColor={handleApplyColor} />\n      ))}\n    </tr>\n  );\n}\n\nexport default TableRow;\n","import React from \"react\";\nimport TableRow from \"./TableRow\";\n\nconst Table = ({ numRows, numCols, handleApplyColor }) => {\n  return (\n    <table id=\"grid\">\n      <tbody>\n      {[...Array(numRows)].map((val, index) => (\n        <TableRow\n          key={index}\n          numCols={numCols}\n          handleApplyColor={handleApplyColor} />\n      ))}\n      </tbody>\n    </table>\n );\n};\nexport default Table;","import React, { useState } from \"react\";\nimport './App.css';\nimport Table from './components/Table';\nimport TableCell from './components/TableCell'\n\nconst App = () => {\n  const [rows, setRow] = useState(0);\n  const [cols, setCol] = useState(0);\n  const [color, setColor] = useState(\"red\");\n\n  const addRow = () => {\n    if (rows === 0) {\n      setRow(1);\n      setCol(1);\n    }\n    else {\n      setRow(rows => rows + 1);\n    }\n    console.log(rows)\n  };\n  const addCol = () => {\n    if (cols === 0) {\n      setRow(1);\n      setCol(1);\n    }\n    else {\n      setCol(cols => cols + 1);\n    }\n  };\n\n  const removeRow = () => {\n    if (rows > 0) {\n      if (rows === 1){\n        setRow(0);\n        setRow(0);\n      }\n      else {\n        setRow(rows => rows - 1);\n      }\n      console.log(rows)\n    }\n  };\n\n  const removeCol = () => {\n    if (cols > 0) {\n      if (cols === 1){\n        setCol(0);\n        setCol(0);\n      }\n      else {\n        setCol(cols => cols - 1);\n      }\n      console.log(cols)\n    }\n  };\n\n  const colorSelected = e => setColor(e.target.value);\n\n  const handleApplyColor = e => (e.target.style.backgroundColor = color);\n\n  //This function will fill in all of the cells color to the selected one, even if they are not empty\n  const fill = () => {\n      var rows =  document.getElementById(\"grid\").getElementsByTagName('td');\n      for (var i = 0; i < rows.length; i++) {\n          rows[i].style.backgroundColor = color;\n      }\n  };\n\n  //This function will fill in empty cells color to the selected one.\n  const fillUncolored = () => {\n      var rows =  document.getElementById(\"grid\").getElementsByTagName('td');\n      for (var i = 0; i < rows.length; i++) {\n          if (rows[i].style.backgroundColor === \"\") {\n              rows[i].style.backgroundColor = color;\n          }\n      }\n  };\n\n  //This function will clear all cells color.\n  const clearAll = () => {\n      var rows =  document.getElementById(\"grid\").getElementsByTagName('td');\n      for (var i = 0; i < rows.length; i++) {\n          rows[i].style.backgroundColor = \"\";\n      }\n  };\n\n  return (\n  <div>\n    <h1 class='header'>ReactGrid</h1>\n      <button onClick={addRow}>Add Row</button>\n      <button onClick={addCol}>Add Column</button>\n      <button onClick={removeRow}>Remove Row</button>\n      <button onClick={removeCol}>Remove Column</button>\n      <button onClick={fillUncolored}>Fill Uncolored</button>\n      <button onClick={fill}>Fill All</button>\n      <button onClick={clearAll}>Clear</button>\n\n      <select onChange={colorSelected}>\n        <option value=\"red\">Red</option>\n        <option value=\"blue\">Blue</option>\n        <option value=\"yellow\">Yellow</option>\n        <option value=\"brown\">Brown</option>\n      </select>\n\n      <Table numRows={rows} numCols={cols} handleApplyColor={handleApplyColor} />\n\n\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}